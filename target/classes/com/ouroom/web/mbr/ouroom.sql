
#----------------------------Table01 :: Member----------------------------
CREATE TABLE MEMBER(
  SEQ INT AUTO_INCREMENT PRIMARY KEY,
  EMAIL VARCHAR(30) UNIQUE,
  PASSWORD VARCHAR(80),
  NICKNAME VARCHAR(50) UNIQUE,
  GENDER VARCHAR(10),
  BIRTHDAY DATE,
  PROFILE VARCHAR(20),
  JOIN_DATE DATE,
  AGE VARCHAR(10)
);
#----------------------------Table02 :: Board----------------------------
CREATE TABLE BOARD(
  SEQ INT AUTO_INCREMENT PRIMARY KEY, 
  ARTICLE VARCHAR(10)
);
  
#----------------------------Table03 :: Post----------------------------
CREATE TABLE POST(
  SEQ INT AUTO_INCREMENT PRIMARY KEY,
  TITLE VARCHAR(50) NOT NULL,
  CONTENT VARCHAR(500),
  REGI_DATE DATE NOT NULL,
  VIEW_CNT INT DEFAULT 0,
  LIKE_CNT INT DEFAULT 0,
  SHARE_CNT INT DEFAULT 0,
  ROOM_TYPE VARCHAR(20),
  ROOM_SIZE VARCHAR(20),
  LAST_UPDATE DATE NOT NULL,
  MEM_SEQ INT,
  BOARD_SEQ INT,
  IMAGE VARCHAR(200)
);

#----------------------------Table04 :: Comment----------------------------
CREATE TABLE COMMENT(
  SEQ INT AUTO_INCREMENT PRIMARY KEY,
  COMMENT VARCHAR(200) NOT NULL,
  ARTICLE_SEQ INT NOT NULL,
  MEM_SEQ INT,
  BOARD_SEQ INT
);

#----------------------------Table05 :: Likeit----------------------------
CREATE TABLE LIKEIT(
  SEQ INT AUTO_INCREMENT PRIMARY KEY,
  ARTICLE_SEQ INT NOT NULL,
  MEM_SEQ INT,
  BOARD_SEQ INT,
  CHK INT DEFAULT 0
);

#----------------------------Table06 :: HashTag----------------------------
CREATE TABLE HASHTAG(
  SEQ INT AUTO_INCREMENT PRIMARY KEY,
  KEYWORD VARCHAR(50) NOT NULL,
  POST_SEQ INT
);


#----------------------------Table07 :: ImgTag----------------------------
CREATE TABLE IMGTAG(
  SEQ INT AUTO_INCREMENT PRIMARY KEY,
  ITEM_TITLE VARCHAR(50),
  POINT VARCHAR(20),
  POST_SEQ INT,
  ITEM_SEQ INT
);

#----------------------------Table08 :: Item_post----------------------------

CREATE TABLE ITEM_POST(
   SEQ INT AUTO_INCREMENT PRIMARY KEY,
   REGI_DATE DATE NOT NULL,
   VIEW_CNT INT DEFAULT 0,
   LIKE_CNT INT DEFAULT 0,
   SHARE_CNT INT DEFAULT 0,
   BOARD_SEQ INT,
   ITEM_SEQ INT,
   IMAGE VARCHAR(30),
   CONTENT VARCHAR(200)
);


#----------------------------Table09 :: Item----------------------------
CREATE TABLE ITEM(
  SEQ INT AUTO_INCREMENT PRIMARY KEY,
  TITLE VARCHAR(50),
  PRICE INT,
  DELIVERY VARCHAR(10),
  DISCOUNT INT,
  PHOTO VARCHAR(100),
  SALE_CNT INT,
  STORE_CNT INT,
  CATEGORY2_SEQ INT,
  SUM INT
);

#----------------------------Table10 :: Item_option----------------------------
CREATE TABLE ITEM_OPTION(
  SEQ INT AUTO_INCREMENT PRIMARY KEY,
  OPTIONS VARCHAR(50),
  ITEM_SEQ INT
);

#----------------------------Table11 :: category1----------------------------
CREATE TABLE CATEGORY1(
   SEQ INT AUTO_INCREMENT PRIMARY KEY,
   CATEGORY VARCHAR(20)
);

#----------------------------Table12 :: category2----------------------------
CREATE TABLE CATEGORY2(
   SEQ INT AUTO_INCREMENT PRIMARY KEY,
   CATEGORY VARCHAR(20),
   CATEGORY1_SEQ INT,
   CATEGORY_KR VARCHAR(20)
);

#----------------------------Table13 :: Cart----------------------------
CREATE TABLE CART(
  SEQ INT AUTO_INCREMENT PRIMARY KEY,
  MEM_SEQ INT,
  ITEM_SEQ INT,
  CNT INT,
  OPTION_SEQ INT
);

#----------------------------Table14 :: Purchase----------------------------
CREATE TABLE PURCHASE(
  SEQ INT AUTO_INCREMENT PRIMARY KEY,
  MEM_SEQ INT,
  ITEM_SEQ INT,
  CNT INT,
  OPTION_SEQ INT,
  PURCHASE_DATE DATE
);

#----------------------------Table15 :: VISITOR----------------------------
CREATE TABLE VISITOR(
  SEQ INT AUTO_INCREMENT PRIMARY KEY,
  MEM_SEQ INT,
  VISIT_DATE DATE,
  MEM_VALI INT
);

#----------------------------Table16 :: REVIEW----------------------------
CREATE TABLE REVIEW(
  SEQ INT AUTO_INCREMENT PRIMARY KEY,
  CONTENTS VARCHAR(300),
  REGI_DATE VARCHAR(30),
  IMAGE VARCHAR(30),
  NICKNAME VARCHAR(30)
);
#---------------------------- 제약조건 ----------------------------
#post
ALTER TABLE POST ADD CONSTRAINT FOREIGN KEY(MEM_SEQ) REFERENCES MEMBER(SEQ);
ALTER TABLE POST ADD CONSTRAINT FOREIGN KEY(BOARD_SEQ) REFERENCES BOARD(SEQ);

#comment
ALTER TABLE COMMENT ADD CONSTRAINT FOREIGN KEY(MEM_SEQ) REFERENCES MEMBER(SEQ);
ALTER TABLE COMMENT ADD CONSTRAINT FOREIGN KEY(BOARD_SEQ) REFERENCES BOARD(SEQ);

#likeit
ALTER TABLE LIKEIT ADD CONSTRAINT FOREIGN KEY(MEM_SEQ) REFERENCES MEMBER(SEQ);
ALTER TABLE LIKEIT ADD CONSTRAINT FOREIGN KEY(BOARD_SEQ) REFERENCES BOARD(SEQ);

#hashtag
ALTER TABLE HASHTAG ADD CONSTRAINT FOREIGN KEY(POST_SEQ) REFERENCES POST(SEQ) ON DELETE CASCADE;

#imgtag
ALTER TABLE IMGTAG ADD CONSTRAINT FOREIGN KEY(ITEM_SEQ) REFERENCES ITEM(SEQ) ON DELETE SET NULL;
ALTER TABLE IMGTAG ADD CONSTRAINT FOREIGN KEY(POST_SEQ) REFERENCES POST(SEQ) ON DELETE CASCADE;

#item_post
ALTER TABLE ITEM_POST ADD CONSTRAINT FOREIGN KEY(ITEM_SEQ) REFERENCES ITEM(SEQ);
ALTER TABLE ITEM_POST ADD CONSTRAINT FOREIGN KEY(BOARD_SEQ) REFERENCES BOARD(SEQ);

#item
ALTER TABLE ITEM ADD CONSTRAINT FOREIGN KEY(CATEGORY2_SEQ) REFERENCES CATEGORY2(SEQ);

#item_option
ALTER TABLE ITEM_OPTION ADD CONSTRAINT FOREIGN KEY(ITEM_SEQ) REFERENCES ITEM(SEQ);

#category2
ALTER TABLE CATEGORY2 ADD CONSTRAINT FOREIGN KEY(CATEGORY1_SEQ) REFERENCES CATEGORY1(SEQ);

#cart
ALTER TABLE CART ADD CONSTRAINT FOREIGN KEY(MEM_SEQ) REFERENCES MEMBER(SEQ);
ALTER TABLE CART ADD CONSTRAINT FOREIGN KEY(ITEM_SEQ) REFERENCES ITEM(SEQ);
ALTER TABLE CART ADD CONSTRAINT FOREIGN KEY(OPTION_SEQ) REFERENCES ITEM_OPTION(SEQ);

#purchase
ALTER TABLE PURCHASE ADD CONSTRAINT FOREIGN KEY(MEM_SEQ) REFERENCES MEMBER(SEQ);
ALTER TABLE PURCHASE ADD CONSTRAINT FOREIGN KEY(ITEM_SEQ) REFERENCES ITEM(SEQ);
ALTER TABLE PURCHASE ADD CONSTRAINT FOREIGN KEY(OPTION_SEQ) REFERENCES ITEM_OPTION(SEQ);

#visitor
ALTER TABLE VISITOR ADD CONSTRAINT FOREIGN KEY(MEM_SEQ) REFERENCES MEMBER(SEQ);

#---------------------------- etc ----------------------------
#TIMESTAMP 걸기
ALTER TABLE ITEM_POST MODIFY COLUMN REGI_DATE date DEFAULT current_timestamp() NOT NULL;
ALTER TABLE PURCHASE MODIFY COLUMN PURCHASE_DATE date DEFAULT current_timestamp() NOT NULL;

#----------------------------VIEW :: danah ----------------------------

CREATE OR REPLACE VIEW POST_LIST_VIEW AS
SELECT A.*, COUNT(c.SEQ) AS COMMENT_CNT
	FROM (
		SELECT
			ROW_NUMBER() OVER(ORDER BY p.SEQ DESC) AS No, p.SEQ, p.TITLE, p.CONTENT, p.REGI_DATE, p.VIEW_CNT, p.LIKE_CNT, p.SHARE_CNT, p.ROOM_TYPE, p.ROOM_SIZE, p.MEM_SEQ, p.IMAGE, p.LAST_UPDATE, m.NICKNAME, m.PROFILE, COUNT(i.SEQ) AS IMGTAG_CNT
		FROM POST p
			LEFT JOIN MEMBER m ON p.MEM_SEQ LIKE m.SEQ
			LEFT JOIN IMGTAG i ON p.SEQ LIKE i.POST_SEQ
		GROUP BY p.SEQ
	)A
	LEFT JOIN COMMENT c ON A.SEQ LIKE c.ARTICLE_SEQ AND c.BOARD_SEQ LIKE 1
	GROUP BY A.seq
ORDER BY A.No;

CREATE OR REPLACE VIEW POST_DETAIL_VIEW AS
SELECT p.SEQ, p.TITLE, p.CONTENT, p.REGI_DATE, p.VIEW_CNT, p.LIKE_CNT, p.SHARE_CNT, p.ROOM_TYPE, p.ROOM_SIZE, p.MEM_SEQ, p.IMAGE, p.LAST_UPDATE, m.NICKNAME, m.PROFILE, COUNT(c.SEQ) AS COMMENT_CNT
FROM POST p
	LEFT JOIN MEMBER m ON p.MEM_SEQ LIKE m.SEQ
	LEFT JOIN COMMENT c ON p.SEQ LIKE c.ARTICLE_SEQ AND c.BOARD_SEQ
GROUP BY p.SEQ
ORDER BY p.SEQ desc;

CREATE OR REPLACE VIEW POST_COMMENT_VIEW AS
SELECT 
	c.SEQ, c.COMMENT, c.ARTICLE_SEQ AS POST_SEQ, m.SEQ AS MEM_SEQ ,m.NICKNAME, m.PROFILE 
FROM 
	COMMENT c
JOIN MEMBER m ON c.MEM_SEQ LIKE m.SEQ
WHERE c.BOARD_SEQ LIKE 1
ORDER BY c.SEQ DESC;

#----------------------------VIEW :: jakyung ----------------------------
## <V_TOTALVISITORCOUNT> 
# V_MEMNVISITOR 
# MALECOUNT 
# FEMALECOUNT

CREATE OR REPLACE VIEW V_MEMNVISITOR AS
SELECT B.SEQ, B.EMAIL, B.PASSWORD, B.NICKNAME, B.GENDER, B.BIRTHDAY, B.PROFILE, B.JOIN_DATE, B.AGE, A.MEM_SEQ, A.VISIT_DATE, A.MEM_VALI      
FROM MEMBER B
 	RIGHT JOIN (SELECT MEM_SEQ,
                    VISIT_DATE ,
                    MEM_VALI 
              FROM VISITOR 
              WHERE  
              MEM_VALI LIKE 1 ) A
    ON A.MEM_SEQ LIKE B.SEQ;

CREATE OR REPLACE VIEW MALECOUNT AS
SELECT VISIT_DATE DATE, GENDER MALE,COUNT(*) MALEC FROM V_MEMNVISITOR
WHERE GENDER ='남자'
GROUP BY VISIT_DATE
;

CREATE OR REPLACE VIEW FEMALECOUNT AS
SELECT VISIT_DATE DATE, GENDER MALE,COUNT(*) MALEC FROM V_MEMNVISITOR
WHERE GENDER ='여자'
GROUP BY VISIT_DATE
;

CREATE OR REPLACE VIEW V_TOTALVISITORCOUNT AS
SELECT MALECOUNT.DATE DATE, MALECOUNT.MALE MALE, MALECOUNT.MALEC MALEC, FEMALECOUNT.MALE FEMALE, FEMALECOUNT.MALEC FEMALEC 
FROM MALECOUNT JOIN FEMALECOUNT 
ON MALECOUNT.DATE LIKE FEMALECOUNT.DATE
;


--------------------여기부터 안됌-----------------------
##<V_GAZUAALL_RYU>
#V_GAZUA20_RYU
#V_GAZUA30_RYU
#V_GAZUA40_RYU
#V_GAZUA50_RYU

CREATE OR REPLACE VIEW V_GAZUA20_RYU AS
SELECT SUM AS 20SUM , SUM(CNT) 20SC 
                  FROM PURCHASE P
                  LEFT JOIN ITEM I 
                    ON P.ITEM_SEQ LIKE I.SEQ
                  LEFT JOIN MEMBER M 
                    ON P.MEM_SEQ LIKE M.SEQ
            WHERE AGE LIKE '2_'
            GROUP BY SUM
;

CREATE OR REPLACE VIEW V_GAZUA30_RYU AS
SELECT SUM AS SUM , SUM(CNT) 30SC , G.20SC 
                  FROM PURCHASE P
                  LEFT JOIN ITEM I 
                    ON P.ITEM_SEQ LIKE I.SEQ
                  LEFT JOIN MEMBER M 
                    ON P.MEM_SEQ LIKE M.SEQ
                  LEFT JOIN V_GAZUA20_RYU G
                    ON G.20SUM LIKE I.SUM
            WHERE AGE LIKE '3_'
            GROUP BY I.SUM
;

CREATE OR REPLACE VIEW V_GAZUA40_RYU AS            
SELECT G.SUM AS SUM, SUM(P.CNT) AS 40SC ,G.30SC AS 30SC ,G.20SC AS 20SC 
FROM (((PURCHASE P LEFT JOIN ITEM I ON(P.ITEM_SEQ LIKE I.SEQ)) LEFT JOIN MEMBER M ON(P.MEM_SEQ LIKE M.SEQ)) LEFT JOIN V_GAZUA30_RYU G ON(G.SUM LIKE I.SUM)) WHERE M.AGE LIKE '4_' GROUP BY G.SUM
;

CREATE OR REPLACE VIEW V_GAZUA50_RYU AS      
SELECT G.SUM AS SUM,SUM(P.CNT) AS 50SC,G.40SC AS 40SC,G.30SC AS 30SC,G.20SC AS 20SC FROM (((PURCHASE P LEFT JOIN ITEM I ON(P.ITEM_SEQ LIKE I.SEQ)) LEFT JOIN MEMBER M ON(P.MEM_SEQ LIKE M.SEQ)) LEFT JOIN V_GAZUA40_RYU G ON(G.SUM LIKE I.SUM)) WHERE M.AGE LIKE '5_' OR M.AGE LIKE '6_' GROUP BY I.SUM
;

CREATE OR REPLACE VIEW V_GAZUAALL_RYU AS
SELECT 
    G.SUM SUM , SUM(CNT) 10SC , G.20SC , G.30SC ,G.40SC ,G.50SC
      FROM PURCHASE P
      LEFT JOIN ITEM I 
        ON P.ITEM_SEQ LIKE I.SEQ
      LEFT JOIN MEMBER M 
        ON P.MEM_SEQ LIKE M.SEQ
      LEFT JOIN V_GAZUA50_RYU G
        ON G.SUM LIKE I.SUM
WHERE AGE LIKE '1_'
GROUP BY I.SUM
;

-------------여기까지---------
#<V_MBR_MANWOMAN_RYU>
#V_MBR_MAN_RYU 
#V_MBR_WOMAN_RYU 

CREATE OR REPLACE VIEW V_MBR_MAN_RYU AS
SELECT MIN(MEMBER.AGE) AS AGES,COUNT(0) AS COUNT FROM MEMBER WHERE MEMBER.AGE LIKE '1_' AND MEMBER.GENDER LIKE '남자' UNION SELECT MIN(MEMBER.AGE) AS AGES,COUNT(0) AS COUNT FROM MEMBER WHERE MEMBER.AGE LIKE '2_' AND MEMBER.GENDER LIKE '남자' UNION SELECT MIN(MEMBER.AGE) AS AGES,COUNT(0) AS COUNT FROM MEMBER WHERE MEMBER.AGE LIKE '3_' AND MEMBER.GENDER LIKE '남자' UNION SELECT MIN(MEMBER.AGE) AS AGES,COUNT(0) AS COUNT FROM MEMBER WHERE MEMBER.AGE LIKE '4_' AND MEMBER.GENDER LIKE '남자' UNION SELECT MIN(MEMBER.AGE) AS AGES,COUNT(0) AS COUNT FROM MEMBER WHERE MEMBER.AGE LIKE '5_' OR MEMBER.AGE LIKE '6_' AND MEMBER.GENDER LIKE '남자'
;

CREATE OR REPLACE VIEW V_MBR_WOMAN_RYU AS
SELECT MIN(MEMBER.AGE) AS AGES, COUNT(0) AS COUNT FROM MEMBER WHERE MEMBER.AGE LIKE '1_' AND MEMBER.GENDER LIKE '여자' UNION SELECT MIN(MEMBER.AGE) AS AGES,COUNT(0) AS COUNT FROM MEMBER WHERE MEMBER.AGE LIKE '2_' AND MEMBER.GENDER LIKE '여자' UNION SELECT MIN(MEMBER.AGE) AS AGES , COUNT(0) AS COUNT FROM MEMBER WHERE MEMBER.AGE LIKE '3_' AND MEMBER.GENDER LIKE '여자' UNION SELECT MIN(MEMBER.AGE) AS AGES,COUNT(0) AS COUNT FROM MEMBER WHERE MEMBER.AGE LIKE '4_' AND MEMBER.GENDER LIKE '여자' UNION SELECT MIN(MEMBER.AGE) AS AGES,COUNT(0) AS COUNT FROM MEMBER WHERE MEMBER.AGE LIKE '5_' OR MEMBER.AGE LIKE '6_' AND MEMBER.GENDER LIKE '여자'
;


CREATE OR REPLACE VIEW V_MBR_MANWOMAN_RYU AS
SELECT A.AGES AGES, A.COUNT MANCOUNT, B.COUNT WOMANCOUNT FROM V_MBR_MAN_RYU A JOIN V_MBR_WOMAN_RYU B ON A.AGES = B.AGES
;


#<V_MBR_TOTAL >
CREATE OR REPLACE VIEW V_MBR_TOTAL AS
SELECT MIN(MEMBER.AGE) AS AGES, COUNT(*) AS GENDERCOUNT FROM MEMBER WHERE MEMBER.AGE LIKE '1_' UNION SELECT MIN(MEMBER.AGE) AS AGES, COUNT(*) AS THIRAGE FROM MEMBER WHERE MEMBER.AGE LIKE '2_' UNION SELECT MIN(MEMBER.AGE) AS AGES, COUNT(0) AS THIRAGE FROM MEMBER WHERE MEMBER.AGE LIKE '3_' UNION SELECT MIN(MEMBER.AGE) AS AGES,COUNT(0) AS THIRAGE FROM MEMBER WHERE MEMBER.AGE LIKE '4_' UNION SELECT MIN(MEMBER.AGE) AS AGES,COUNT(0) AS THIRAGE FROM MEMBER WHERE MEMBER.AGE LIKE '5_' OR MEMBER.AGE LIKE '6_'
;


